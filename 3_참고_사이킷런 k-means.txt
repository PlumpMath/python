#########3 http://rfriend.tistory.com/tag/%ED%8D%BC%EC%A7%80%20C-%ED%8F%89%EA%B7%A0%20%EA%B5%B0%EC%A7%91%ED%99%94%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98



import pandas as pd
import tensorflow as tf

########## -----------------------------------------------------------------------
########## 키, 몸무게, 레이블이 적힌 CSV 파일 읽어 들이기 ---  2000만건 자료임
csv = pd.read_csv("c:/py_data/bmi.csv")
csv.head()

####-- 산포도행렬
import matplotlib.pyplot as plt
from pandas.tools.plotting import scatter_matrix
scatter_matrix(csv)
plt.show()

#############
a=csv['height'] ; b=csv['weight']
feature=pd.concat([a,b],axis=1)
feature.head()

##########
from sklearn.cluster import KMeans  #KMeans 모듈
model = KMeans(n_clusters=10,algorithm='auto')
model.fit(feature)  #중심점 추출함  이 학습모델을 갖고 데이터를 수행함(model.predic)
predict = pd.DataFrame(model.predict(feature))
predict.columns=['predict']
r=pd.concat([feature,predict],axis=1)
r.head()

###########
#-- 각 군집의 중심점에 빨간점으로 표시하자
centers = pd.DataFrame(model.cluster_centers_,columns=['height','weight'])
center_x = centers['height']
center_y = centers['weight']
plt.scatter(center_x,center_y,s=50,marker='D',c='r')
plt.show()

########
#-----  데이터스케일링 (필드값(각컬럼) 예: StandardScaling(숫자값의 범위를 0~1상이의 같은 크기로 맞춤)
#- 여러 단계를 거쳐서 데이타가 정재되고 학습되는 것을 파이프라인이라고 하고, sklearn.pipeline을 이용하여 손쉽게 구현이 가능하다
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans


##---먼저 StandardScaler 객체 scaler를 만든 후, KMeans 모델 객체를 model로 선언한다. 다음에 make_pipeline 메서드를 이용하여 scaler kmeans 모델을 순차로 실행하도록 파이프라인을 만든다.
scaler = StandardScaler()
model = KMeans(n_clusters=10)
pipeline = make_pipeline(scaler,model)


pipeline.fit(feature)
predict = pd.DataFrame(pipeline.predict(feature))   #0~10까지의 분류군을 넣음.
predict

# 중심점에서의 각 떨어짐의 정도를 응집도라한다.
# 응집도가 (     )수록 군집화는 잘되어 있다. 군집화는 model.inertia_ 함수로 알아볼수 있다.
# 4개의 클러스터로 군집화(라벨 0,1,2),  model.fit(학습데이터)
model = KMeans(n_clusters=10,algorithm='auto')
model.fit(feature)  #중심점 추출함  이 학습모델을 갖고 데이터를 수행함(model.predic)
model.inertia_


########## 10개의 자료를 주고 응집도 계산
row=10
cnt=range(1,row)
k=[]
for i in cnt:
    model=KMeans(n_clusters=i)
    model.fit(feature)
    #k[i-1]=model.inertia_
    k.append(model.inertia)
print("i={0}, k={1}".format(i,k))

# 응집도 차트로 보기Plot ks vs inertias
plt.plot(k, '-o')
plt.xlabel('number of clusters, k')
plt.ylabel('inertia')
plt.xticks(k)
plt.show()

##http://rfriend.tistory.com/228?category=706119

