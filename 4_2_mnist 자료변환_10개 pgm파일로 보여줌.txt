# 6만개의 이미지 정보가 저장된 images-idx3-ubyte와 해당이미지의 어떤 숫자가 적혀있는지를 나타내는 labels-idx1-ubyte세트로 구성
# 2개의 파일에서 하나씩 이미지와 숫자를 꺼내어 CSV로 만들어줌
# 6만개의 데이터세트가 시간이 오래걸리므로 학습전용 데이터로 1000개, 테스트데이터로 500개를 csv로 저장함.

import struct
def to_csv(name, maxdata):
    # 레이블 파일과 이미지 파일 열기
    lbl_f = open("c:/py_data/mnist/"+name+"-labels-idx1-ubyte", "rb")
    img_f = open("c:/py_data/mnist/"+name+"-images-idx3-ubyte", "rb")
    csv_f = open("c:/py_data/mnist/"+name+".csv", "w", encoding="utf-8")
    # 헤더 정보 읽기 --- (※1)
    mag, lbl_count = struct.unpack(">II", lbl_f.read(8))
    mag, img_count = struct.unpack(">II", img_f.read(8))
    rows, cols = struct.unpack(">II", img_f.read(8))
    pixels = rows * cols
    # 이미지 데이터를 읽고 CSV로 저장하기 ---
    res = []
    for idx in range(lbl_count):
        if idx > maxdata: break
        label = struct.unpack("B", lbl_f.read(1))[0]
        bdata = img_f.read(pixels)
        sdata = list(map(lambda n: str(n), bdata))
        csv_f.write(str(label)+",")
        csv_f.write(",".join(sdata)+"\r\n")
        # 잘 저장됐는지 이미지 파일로 저장해서 테스트하기 --
        if idx < 10:
            s = "P2 28 28 255\n"
            s += " ".join(sdata)
            iname = "c:/py_data/mnist/{0}-{1}-{2}.pgm".format(name,idx,label)
            with open(iname, "w", encoding="utf-8") as f:
                f.write(s)
    csv_f.close()
    lbl_f.close()
    img_f.close()
# 결과를 파일로 출력하기 --- 1000개와 500개 갯수지정
to_csv("train", 1000)
to_csv("t10k", 500)