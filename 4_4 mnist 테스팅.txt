# 픽셀 데이터 24*24(576)의 벡터 학습
# csv파일에서 학습데이터와 테스트 데이터를 읽음
# 학습데이터를 사용해 이미지 픽셀을 학습시킴
# 테스트 데이터를 활용해 예측함
# 예측 결과와 답을 비교해 정답율을 구함.

from sklearn import model_selection, svm, metrics
# CSV 파일을 읽어 들이고 가공하기 --- 레이블과 이미지 데이터를 배열로 작성함.
# 이때 이미지 데이터의 각 픽셀은 0~255까지의 정수임. 이를 256으로 나누기 떄문에 0~<1 실수 벡터가 됨.

def load_csv(fname):
    labels = []
    images = []
    with open(fname, "r") as f:
        for line in f:
            cols = line.split(",")
            if len(cols) < 2: continue
            labels.append(int(cols.pop(0)))
            vals = list(map(lambda n: int(n) / 256, cols))
            images.append(vals)
    return {"labels":labels, "images":images}
data = load_csv("c:/py_data/mnist/train.csv")
test = load_csv("c:/py_data/mnist/t10k.csv")

# 학습하기 --- 사이킷런의 SVM알고리즘을 사용함(분류)
clf = svm.SVC()
clf.fit(data["images"], data["labels"])
# 예측하기 --- 학습
predict = clf.predict(test["images"])


# 결과 확인하기 --- 정답율확인
ac_score = metrics.accuracy_score(test["labels"], predict)
cl_report = metrics.classification_report(test["labels"], predict)
print("정답률 =", ac_score)
print("리포트 =")
print(cl_report)